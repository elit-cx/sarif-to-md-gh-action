"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sarifFormatter = void 0;
// @ts-ignore
var markdown_escape_1 = __importDefault(require("markdown-escape"));
function escapeMarkdown(strings) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return strings.reduce(function (result, str, i) {
        var value = values[i - 1];
        if (typeof value === "string") {
            return result + markdown_escape_1.default(value) + str;
        }
        else {
            return result + String(value) + str;
        }
    });
}
var createCodeURL = function (result, options) {
    return options.githubHost + "/" + ;
};
exports.sarifFormatter = function (options) {
    return function (sarifLog) {
        return sarifLog.runs.map(function (run) {
            var _a, _b, _c;
            // # tool section
            // Rule info
            // Vulnerability info
            // ## Results
            // Result(s)
            var rule = escapeMarkdown(templateObject_2 || (templateObject_2 = __makeTemplateObject(["# ", "\n<!-- Rule Info -->\n", "\n \n<details><summary>Details</summary>\n<pre>", "</pre></details>\n\n<!-- Results \n\n- rule id\n- message\n- vulnerability location\n\n-->\n\n", "\n"], ["\\\n# ", "\n<!-- Rule Info -->\n",
                "\n \n<details><summary>Details</summary>\n<pre>", "</pre></details>\n\n<!-- Results \n\n- rule id\n- message\n- vulnerability location\n\n-->\n\n",
                "\n"])), run.tool.driver.name, (_b = (_a = run.tool.driver) === null || _a === void 0 ? void 0 : _a.rules) === null || _b === void 0 ? void 0 : _b.map(function (rule) {
                // rule description
                return "**" + rule.id + "**\n\n> " + rule.shortDescription;
            }), JSON.stringify(run.tool, null, 4), (_c = run.results) === null || _c === void 0 ? void 0 : _c.map(function (result) {
                return escapeMarkdown(templateObject_1 || (templateObject_1 = __makeTemplateObject(["**", "**: ", "\n\n\n"], ["**", "**: ", "\n\n\n"])), result.ruleId, result.message);
            }));
            return {
                title: "",
                body: ""
            };
        });
    };
};
var templateObject_1, templateObject_2;
//# sourceMappingURL=sarif-to-markdown.js.map
