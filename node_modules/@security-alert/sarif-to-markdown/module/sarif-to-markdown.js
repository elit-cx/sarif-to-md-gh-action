var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
// @ts-ignore
import escape from 'markdown-escape';
import urlJoin from "url-join";
function escapeMarkdown(strings) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return strings.reduce(function (result, str, i) {
        var value = values[i - 1];
        if (typeof value === "string") {
            return result + escape(value) + str;
        }
        else {
            return result + String(value) + str;
        }
    });
}
var createCodeURL = function (result, options) {
    console.log('Enter createCodeURL')
    var _a, _b;
    var githubHost = (_a = options.githubHost) !== null && _a !== void 0 ? _a : "https://github.com";
    if (!Array.isArray(result.locations)) {
        return [];
    }
    return (_b = result.locations) === null || _b === void 0 ? void 0 : _b.flatMap(function (location) {
        if (!location.physicalLocation) {
            return [];
        }
        var physicalLocation = location.physicalLocation;
        if (!physicalLocation.artifactLocation) {
            return [];
        }
        if (!physicalLocation.region) {
            return [];
        }
        var lineNumber = physicalLocation.region.endLine !== undefined ? "L" + physicalLocation.region.startLine + "-" + physicalLocation.region.endLine : "L" + physicalLocation.region.startLine;
        return urlJoin(githubHost, options.owner, options.repo, "blob/" + options.branch, options.sourceRoot, physicalLocation.artifactLocation.uri + "#" + lineNumber);
    });
};
export var sarifToMarkdown = function (options) {
    return function (sarifLog) {
        return sarifLog.runs.map(function (run) {
            console.log('Enter sarifToMarkdown')
            var _a, _b, _c, _d;
            var title = options.title ? "# " + options.title + "\n" : "";
            // # tool section
            // Rule info
            // Vulnerability info
            // ## Results
            // Result(s)
            /**
             * # Rule Info
             */
            var ruleInfo = escapeMarkdown(templateObject_1 || (templateObject_1 = __makeTemplateObject(["## Rules\n<!-- Rule Info -->\n", "\n "], ["\\\n## Rules\n<!-- Rule Info -->\n",
                "\n "])), (_b = (_a = run.tool.driver) === null || _a === void 0 ? void 0 : _a.rules) === null || _b === void 0 ? void 0 : _b.map(function (rule) {
                var _a, _b;
                var severity = rule.properties ? (_a = rule.properties) === null || _a === void 0 ? void 0 : _a["problem.severity"] : "";
                // rule description
                return "**" + rule.id + "** (severity: **" + severity + "**)\n\n> " + ((_b = rule.shortDescription) === null || _b === void 0 ? void 0 : _b.text);
            }));
            var ruleDetails = "<details><summary>Details</summary>\n<pre>" + JSON.stringify(run.tool, null, 4) + "</pre></details>";
            /* Results
            - rule id
            - message
            - vulnerability source location

            If pass the scan, results is empty array
            */
            var results = run.results && run.results.length > 0 ? "\n## Results\n\n" + ((_c = run.results) === null || _c === void 0 ? void 0 : _c.map(function (result) {
                return "- **" + result.ruleId + "**: " + escape(result.message.text)
                    + "\n\n"
                    + createCodeURL(result, options).join("\n")
                    + "\n";
            }).join("\n")) + "\n"
                : "\n## Results\n\nNo Error\n\n";
            return {
                body: title + ruleInfo + "\n" + ruleDetails + "\n" + results,
                hasMessages: ((_d = run.results) === null || _d === void 0 ? void 0 : _d.length) !== 0
            };
        });
    };
};
var templateObject_1;
//# sourceMappingURL=sarif-to-markdown.js.map